AWSTemplateFormatVersion: 2010-09-09
Description: dm stack
Resources:
  ReviewsStorage:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: dmaslarevic-reviews-cf
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt 
              - LambdaAvgRatingsFunction
              - Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: reviews/
  KinesisReviewsStream:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      Name: dmaslarevic-review-stream-cf
      ShardCount: 1
  FirehoseReviews:
    Type: 'AWS::KinesisFirehose::DeliveryStream'
    Properties:
      DeliveryStreamName: dmaslarevic-reviews-firehose-cf
      S3DestinationConfiguration:
        BucketARN: !GetAtt 
          - ReviewsStorage
          - Arn
        Prefix: reviews/
        RoleARN: 'arn:aws:iam::571632058847:role/dmaslarevic_firehose_delivery_role'
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 5
  PopularCategories:
    Type: 'AWS::KinesisFirehose::DeliveryStream'
    Properties:
      DeliveryStreamName: dmaslarevic-popular-categories-cf
      S3DestinationConfiguration:
        BucketARN: !GetAtt 
          - ViewsStorage
          - Arn
        Prefix: popular_categories/
        RoleARN: 'arn:aws:iam::571632058847:role/dmaslarevic_firehose_delivery_role'
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 5
  DynamoDB:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: user_ip
          AttributeType: S
      KeySchema:
        - AttributeName: user_ip
          KeyType: HASH
      TableName: dmaslarevic_db
      TimeToLiveSpecification:
        AttributeName: time_to_live
        Enabled: true
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  ReviewsCrawler:
    Type: 'AWS::Glue::Crawler'
    Properties:
      DatabaseName: dmaslarevic_db
      TablePrefix: ''
      Description: crawler for review data table in s3 bucket
      Name: dmcrawler
      Role: 'arn:aws:iam::571632058847:role/amilosevic-capstone-glue'
      Targets:
        DynamoDBTargets:
          - Path: dmaslarevic_db
        S3Targets:
          - Path: 's3://dmaslarevic-reviews-cf/reviews/'
  GlueDatabase:
    Type: 'AWS::Glue::Database'
    Properties:
      CatalogId: !Ref 'AWS::AccountId'
      DatabaseInput:
        Description: Capstone database
        Name: dmaslarevic_gluedb_cf
  LambdaAvgRatingsFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: dmaslarevic-resources
        S3Key: run_glue.zip
      Role: 'arn:aws:iam::571632058847:role/amilosevic-capstone-lambda'
      Runtime: python3.8
      Handler: run_glue.lambda_handler
      FunctionName: dmaslarevic-average-ratings
      MemorySize: 128
      Timeout: 900
      Environment:
        Variables:
          GlueReviewCrawler: !Ref ReviewsCrawler
          DynamoDbTable: !Ref DynamoDB
          AthenaReviewQuery: !GetAtt 
            - ReviewsAnalysis
            - NamedQueryId
          Database: !Ref GlueDatabase
          Bucket: dmaslarevic-reviews-cf
      Description: Publishes average ratings for items from Athena to DynamoDB
  ReviewsAnalysis:
    Type: 'AWS::Athena::NamedQuery'
    Properties:
      Database: dmaslarevic_db
      Name: dmaslarevic_athena
      QueryString: >
        SELECT item_id, AVG(review_stars) AS average_rating FROM reviews WHERE
        review_title <> '' AND review_text <> '' GROUP BY item_id
  RatingsPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt 
        - LambdaAvgRatingsFunction
        - Arn
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: 'arn:aws:s3:::dmaslarevic-reviews-cf'
  ViewsStorage:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: dmaslarevic-views-cf
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt 
              - LambdaRunEMR
              - Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: views/
  KinesisViewsStream:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      Name: dmaslarevic-view-stream-cf
      ShardCount: 1
  FirehoseViews:
    Type: 'AWS::KinesisFirehose::DeliveryStream'
    Properties:
      DeliveryStreamName: dmaslarevic-views-firehose-cf
      S3DestinationConfiguration:
        BucketARN: !GetAtt 
          - ViewsStorage
          - Arn
        Prefix: views/
        RoleARN: 'arn:aws:iam::571632058847:role/dmaslarevic_firehose_delivery_role'
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 5
  LambdaRunEMR:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: dmaslarevic-resources
        S3Key: lambda_emr.zip
      Role: 'arn:aws:iam::571632058847:role/amilosevic-capstone-lambda'
      Runtime: python3.8
      Handler: lambda.lambda_handler
      FunctionName: dmaslarevic-lambda-run-emr
      MemorySize: 128
      Timeout: 900
      Description: Lambda function for triggering emr
  EMRPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt 
        - LambdaRunEMR
        - Arn
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: 'arn:aws:s3:::dmaslarevic-views-cf'
  DynamoDBViews:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: user_ip
          AttributeType: S
      KeySchema:
        - AttributeName: user_ip
          KeyType: HASH
      TableName: dmaslarevic_db_views
      TimeToLiveSpecification:
        AttributeName: time_to_live
        Enabled: true
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  ViewsCrawler:
    Type: 'AWS::Glue::Crawler'
    Properties:
      DatabaseName: dmaslarevic_db
      TablePrefix: ''
      Description: crawler for view data table in s3 bucket
      Name: dm_view_crawler
      Role: 'arn:aws:iam::571632058847:role/amilosevic-capstone-glue'
      Targets:
        DynamoDBTargets:
          - Path: dmaslarevic_db_views
        S3Targets:
          - Path: 's3://dmaslarevic-views-cf/views/'
  GlueViewDatabase:
    Type: 'AWS::Glue::Database'
    Properties:
      CatalogId: !Ref 'AWS::AccountId'
      DatabaseInput:
        Description: Capstone database
        Name: dmaslarevic_views_cf
  LambdaViewsDistribution:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: dmaslarevic-resources
        S3Key: run_glue_views.zip
      Role: 'arn:aws:iam::571632058847:role/amilosevic-capstone-lambda'
      Runtime: python3.8
      Handler: run_glue.lambda_handler
      FunctionName: dmaslarevic-views-distribution
      MemorySize: 128
      Timeout: 900
      Environment:
        Variables:
          ViewsCrawler: !Ref ViewsCrawler
          DynamoDbTable: !Ref DynamoDBViews
          AthenaReviewQuery: !GetAtt 
            - ViewsAnalysis
            - NamedQueryId
          Database: !Ref GlueViewDatabase
          Bucket: dmaslarevic-views-cf
      Description: Publishes distribution of views by device types from Athena to DynamoDB
  ViewsAnalysis:
    Type: 'AWS::Athena::NamedQuery'
    Properties:
      Database: dmaslarevic_db_views
      Name: dmaslarevic_views_distribution
      QueryString: |
        SELECT device_type, COUNT(*) FROM views GROUP BY device_type
  DistributionViewsPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt 
        - LambdaViewsDistribution
        - Arn
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: 'arn:aws:s3:::dmaslarevic-views-cf'
  LambdaFilterFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: dmaslarevic-resources
        S3Key: ips_filter_firehose.zip
      Role: 'arn:aws:iam::571632058847:role/amilosevic-capstone-lambda'
      Runtime: python3.8
      Handler: ips_filter_firehose.lambda_handler
      FunctionName: dmaslarevic-ip-filter-cf
      MemorySize: 128
      Timeout: 25
    Description: Filters suspicious ips from the Kinesis Stream
  EventSourceMappingItems:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      EventSourceArn: !Join 
        - ''
        - - 'arn:aws:kinesis:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':stream/'
          - !Ref KinesisReviewsStream
      FunctionName: !GetAtt 
        - LambdaFilterFunction
        - Arn
      StartingPosition: LATEST
  EventSourceMappingReviews:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      EventSourceArn: !Join 
        - ''
        - - 'arn:aws:kinesis:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':stream/'
          - !Ref KinesisViewsStream
      FunctionName: !GetAtt 
        - LambdaFilterFunction
        - Arn
      StartingPosition: LATEST
  ViewsAnalytics:
    Type: 'AWS::KinesisAnalytics::Application'
    Properties:
      ApplicationCode: |-
        CREATE OR REPLACE STREAM "POPULAR_ITEMS"
          ("item_id" VARCHAR(5), "items_count" DOUBLE);

        CREATE OR REPLACE PUMP "ITEMS_PUMP" AS
          INSERT INTO "POPULAR_ITEMS"
            SELECT STREAM *
              FROM TABLE (TOP_K_ITEMS_TUMBLING(
                CURSOR(SELECT STREAM * FROM "SOURCE_SQL_STREAM_001"),
                'ItemId',         -- name of column in single quotes
                10,                -- number of the most frequently occurring values
                60                 -- tumbling window size in seconds
            )
        );
      ApplicationDescription: finding most popular items by views
      ApplicationName: dmaslarevic-popular-items-analytics
      Inputs:
        - NamePrefix: SOURCE_SQL_STREAM
          InputParallelism:
            Count: 1
          KinesisFirehoseInput:
            ResourceARN: !GetAtt 
              - FirehoseViews
              - Arn
            RoleARN: 'arn:aws:iam::571632058847:role/dmaslarevic-analytics'
          InputSchema:
            RecordColumns:
              - Name: DeviceId
                SqlType: VARCHAR(50)
                Mapping: $.device_id
              - Name: DeviceType
                SqlType: VARCHAR(50)
                Mapping: $.device_type
              - Name: ItemId
                SqlType: VARCHAR(50)
                Mapping: $.item_id
              - Name: TS
                SqlType: VARCHAR(50)
                Mapping: $.ts
              - Name: UserIP
                SqlType: VARCHAR(50)
                Mapping: $.user_ip
            RecordFormat:
              RecordFormatType: JSON
              MappingParameters:
                JSONMappingParameters:
                  RecordRowPath: $
  ViewsAnalyticsOutput:
    Type: 'AWS::KinesisAnalytics::ApplicationOutput'
    DependsOn: ViewsAnalytics
    Properties:
      ApplicationName: !Ref ViewsAnalytics
      Output:
        Name: POPULAR_ITEMS
        DestinationSchema:
          RecordFormatType: JSON
        LambdaOutput:
          ResourceARN: !GetAtt 
            - LambdaSNSTrigger
            - Arn
          RoleARN: 'arn:aws:iam::571632058847:role/dmaslarevic-analytics'
  ViewsCategoriesAnalytics:
    Type: 'AWS::KinesisAnalytics::Application'
    Properties:
      ApplicationCode: >-
        CREATE OR REPLACE STREAM "CATEGORIES_STREAM" (category VARCHAR(50),
        views DOUBLE);

        CREATE OR REPLACE PUMP "CATEGORY_PUMP" AS
          INSERT INTO "CATEGORIES_STREAM"
            SELECT STREAM *
              FROM TABLE (TOP_K_ITEMS_TUMBLING(
                CURSOR(
                  SELECT STREAM * FROM "SOURCE_SQL_STREAM_001" AS source
                  JOIN "categories" as reference
                  ON source."ItemId" = reference."item_id"
                ),
                'category',
                10,
                60
            )
        );
      ApplicationDescription: finding most popular categories by views
      ApplicationName: dmaslarevic-popular-categories-analytics
      Inputs:
        - NamePrefix: SOURCE_SQL_STREAM
          InputParallelism:
            Count: 1
          KinesisFirehoseInput:
            ResourceARN: !GetAtt 
              - FirehoseViews
              - Arn
            RoleARN: 'arn:aws:iam::571632058847:role/dmaslarevic-analytics'
          InputSchema:
            RecordColumns:
              - Name: DeviceId
                SqlType: VARCHAR(50)
                Mapping: $.device_id
              - Name: DeviceType
                SqlType: VARCHAR(50)
                Mapping: $.device_type
              - Name: ItemId
                SqlType: VARCHAR(50)
                Mapping: $.item_id
              - Name: TS
                SqlType: VARCHAR(50)
                Mapping: $.ts
              - Name: UserIP
                SqlType: VARCHAR(50)
                Mapping: $.user_ip
            RecordFormat:
              RecordFormatType: JSON
              MappingParameters:
                JSONMappingParameters:
                  RecordRowPath: $
  CategoriesOutput:
    Type: 'AWS::KinesisAnalytics::ApplicationOutput'
    DependsOn: ViewsCategoriesAnalytics
    Properties:
      ApplicationName: !Ref ViewsCategoriesAnalytics
      Output:
        Name: CATEGORIES_STREAM
        DestinationSchema:
          RecordFormatType: JSON
        KinesisFirehoseOutput:
          ResourceARN: !GetAtt 
            - PopularCategories
            - Arn
          RoleARN: 'arn:aws:iam::571632058847:role/dmaslarevic-analytics'
  ReferenceData:
    Type: 'AWS::KinesisAnalytics::ApplicationReferenceDataSource'
    Properties:
      ApplicationName: !Ref ViewsCategoriesAnalytics
      ReferenceDataSource:
        TableName: categories
        ReferenceSchema:
          RecordColumns:
            - Name: item_id
              SqlType: VARCHAR(50)
            - Name: title
              SqlType: VARCHAR(16)
            - Name: description
              SqlType: VARCHAR(16)
            - Name: category
              SqlType: VARCHAR(16)
          RecordFormat:
            RecordFormatType: CSV
            MappingParameters:
              CSVMappingParameters:
                RecordColumnDelimiter: ','
                RecordRowDelimiter: \n
        S3ReferenceDataSource:
          BucketARN: 'arn:aws:s3:::dmaslarevic-resources'
          FileKey: items.csv
          ReferenceRoleARN: 'arn:aws:iam::571632058847:role/dmaslarevic-analytics'
  SNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Endpoint: dunja.maslarevic1@gmail.com
          Protocol: email
  LambdaSNSTrigger:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: dmaslarevic-resources
        S3Key: sns_firehose.zip
      Role: 'arn:aws:iam::571632058847:role/amilosevic-capstone-lambda'
      Runtime: python3.8
      Handler: sns_firehose.lambda_handler
      FunctionName: dmaslarevic-trigger-sns
      MemorySize: 128
      Timeout: 900
      Environment:
        Variables:
          SnsArn: !Ref SNSTopic
      Description: Lambda function to trigger SNS and send email notification
